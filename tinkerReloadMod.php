<?php
/*
 * This is a Tinker Mod that adds saving & reloading to Tinker.
 * The use of this is being able to work with up to date code while maintaining the variable context.
 * It's meant to act like Tinkerwell.
 *
 * Setup:
 * 1. Add this file to the root directory of your Laravel project.
 * 2. Run `php artisan tinker tinkerReloadMod.php`.
 * 3. Now from the tinker shell run `eval(SETUP_TINKER_RELOAD_MOD)`
 * 4. Run `chmod +x tinker` to mark the new script as executable
 * 5. From now on you will start tinker with `./tinker`
 *
 * To start: `./tinker`
 * To reload: `eval(RELOAD)`
 * To exit: `eval(EXIT_MOD)`
 */

class TinkerReloadMod {
    const CONTEXT_PHP_FILE = ".tinkerReloadModContext.php";
    const CONTEXT_VAR_FILE = ".tinkerReloadModContext";
    const RUNNER_SHELL_FILE = "tinker";
    const FILE_PREFIX = "<?php\n/* This file is autogenerated by Tinker Reload Mod */\n";

    private static function putPhpContext($data) {
        file_put_contents(Self::CONTEXT_PHP_FILE, Self::FILE_PREFIX . $data);
    }

    private static function putVarContext($data) {
        file_put_contents(Self::CONTEXT_VAR_FILE, serialize($data));
    }

    private static function emptyVarContext() {
        Self::putVarContext([]);
    }

    /**
    * Empty the file and add the "EXIT_RELOAD_MOD" marker
    * This is needed so the shell script knows to terminate
    */
    private static function emptyPhpContext() {
        Self::putPhpContext(
            'echo "Tinker Reload Mod\\n";'
            . "/*___EXIT_RELOAD_MOD___*/");
    }

    public static function setup() {
        $blankContext = <<<'PHP'
        echo "The Tinker Mod has been setup. Use eval(RELOAD) to reload!\n";
        PHP;
        Self::putPhpContext($blankContext);
        Self::emptyVarContext();

        $shellCode = <<<'SH'
        #!/usr/bin/env bash

        while true
        do
            php artisan tinker tinkerReloadMod.php .tinkerReloadModContext.php
            if grep -q ___EXIT_RELOAD_MOD___ ".tinkerReloadModContext.php"; then
                break;
            fi
        done
        SH;
        file_put_contents(Self::RUNNER_SHELL_FILE, $shellCode);


        logger("Setup complete!");
        echo "Run chmod +x ./tinker to setup and then run ./tinker to get started!";
    }

    public static function exit() {
        Self::emptyVarContext();
        Self::emptyPhpContext();
    }

    /**
    * @return string Outputs a PHP echo statement
    */
    public static function displayVariableList(array $vars): string {
        $names = array_reverse(array_keys($vars));
        if (count($names) === 0) return '';
        $max = 20;
        $names = count($names) > $max
            ? array_slice($names, 0, $max)
            : $names;
        $withSigns = array_map(fn ($key) => '$' . $key, $names);
        $list = implode(", ", $withSigns);
        return <<<TEXT
        echo 'Vars: {$list}' . "\\n";
        TEXT;
    }

    public static function getUserVars(array $vars): array {
        $userVars = [];
        foreach ($vars as $name => $value) {
            // Variables that start with underscores aren't user variables
            if (str_starts_with($name, "_")) {
                continue;
            }
            // Can't serialize closures...
            if ($value instanceof closure) {
                continue;
            }

            $userVars[$name] = $value;
        }
        return $userVars;
    }

    public static function reload($allVars) {
        $userVars = Self::getUserVars($allVars);
        $varList = Self::displayVariableList($userVars);

        $contextFile = Self::CONTEXT_VAR_FILE;
        Self::putVarContext($userVars);

        $historyPhp = <<<PHP
        echo "Tinker Reload Mod\\n";
        {$varList}
        extract(unserialize(file_get_contents('{$contextFile}')));
        PHP;

        file_put_contents(Self::CONTEXT_PHP_FILE, Self::FILE_PREFIX . $historyPhp);
        logger("Reloading...");
    }
}


/** Running `eval(RELOAD)` will reload the session */
const RELOAD = <<<'PHP'
    /* Run this using `eval(RELOAD)` to reload the tinker session */
    $__tinker_reload_mod['reload'](get_defined_vars());
    PHP;

/** Running `eval(EXIT_MOD)` will exit the mod and delete the context */
const EXIT_MOD = <<<'PHP'
    /* Run this using `eval(EXIT_MOD)` to exit the tinker session */
    $__tinker_reload_mod['exit']();
    PHP;

/** Running `eval(EXIT_MOD)` will exit the mod and delete the context */
const SETUP_TINKER_RELOAD_MOD = <<<'PHP'
    /* Run this using `eval(SETUP_TINKER_RELOAD_MOD)` to setup the mod */
    $__tinker_reload_mod['setup']();
    PHP;

$__tinker_reload_mod_shell = get_defined_vars()['__psysh__'];

// To avoid polluting the global namespace, this way we only need 1 variable for all functions
$__tinker_reload_mod = [
    'setup' => function () use ($__tinker_reload_mod_shell) {
        TinkerReloadMod::setup();
        $__tinker_reload_mod_shell->runCommand("exit");
    },
    'exit' => function () use ($__tinker_reload_mod_shell) {
        TinkerReloadMod::exit();
        $__tinker_reload_mod_shell->runCommand("exit");
    },
    'reload' => function ($vars = null) use ($__tinker_reload_mod_shell) {
        if (is_null($vars)) {
            logger('You must call "eval(RELOAD)" so the variables can properly be extracted');
            return;
        }
        TinkerReloadMod::reload($vars);
        $__tinker_reload_mod_shell->runCommand("exit");
    },
];

unset($__tinker_reload_mod_shell);
